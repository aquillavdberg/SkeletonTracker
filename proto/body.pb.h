// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: body.proto

#ifndef PROTOBUF_INCLUDED_body_2eproto
#define PROTOBUF_INCLUDED_body_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_body_2eproto 

namespace protobuf_body_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_body_2eproto
namespace srl {
namespace body {
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Hand;
class HandDefaultTypeInternal;
extern HandDefaultTypeInternal _Hand_default_instance_;
class Joint;
class JointDefaultTypeInternal;
extern JointDefaultTypeInternal _Joint_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Targets;
class TargetsDefaultTypeInternal;
extern TargetsDefaultTypeInternal _Targets_default_instance_;
}  // namespace body
}  // namespace srl
namespace google {
namespace protobuf {
template<> ::srl::body::Body* Arena::CreateMaybeMessage<::srl::body::Body>(Arena*);
template<> ::srl::body::Hand* Arena::CreateMaybeMessage<::srl::body::Hand>(Arena*);
template<> ::srl::body::Joint* Arena::CreateMaybeMessage<::srl::body::Joint>(Arena*);
template<> ::srl::body::Pose* Arena::CreateMaybeMessage<::srl::body::Pose>(Arena*);
template<> ::srl::body::Position* Arena::CreateMaybeMessage<::srl::body::Position>(Arena*);
template<> ::srl::body::Quaternion* Arena::CreateMaybeMessage<::srl::body::Quaternion>(Arena*);
template<> ::srl::body::Targets* Arena::CreateMaybeMessage<::srl::body::Targets>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace srl {
namespace body {

enum Hand_HandState {
  Hand_HandState_UNKNOWN = 0,
  Hand_HandState_NOT_TRACKED = 1,
  Hand_HandState_OPEN = 3,
  Hand_HandState_CLOSED = 4,
  Hand_HandState_Hand_HandState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Hand_HandState_Hand_HandState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Hand_HandState_IsValid(int value);
const Hand_HandState Hand_HandState_HandState_MIN = Hand_HandState_UNKNOWN;
const Hand_HandState Hand_HandState_HandState_MAX = Hand_HandState_CLOSED;
const int Hand_HandState_HandState_ARRAYSIZE = Hand_HandState_HandState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Hand_HandState_descriptor();
inline const ::std::string& Hand_HandState_Name(Hand_HandState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Hand_HandState_descriptor(), value);
}
inline bool Hand_HandState_Parse(
    const ::std::string& name, Hand_HandState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hand_HandState>(
    Hand_HandState_descriptor(), name, value);
}
enum Body_InteractionMode {
  Body_InteractionMode_NONE = 0,
  Body_InteractionMode_FOLLOW = 1,
  Body_InteractionMode_MIRROR = 2,
  Body_InteractionMode_AVOID = 3,
  Body_InteractionMode_Body_InteractionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Body_InteractionMode_Body_InteractionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Body_InteractionMode_IsValid(int value);
const Body_InteractionMode Body_InteractionMode_InteractionMode_MIN = Body_InteractionMode_NONE;
const Body_InteractionMode Body_InteractionMode_InteractionMode_MAX = Body_InteractionMode_AVOID;
const int Body_InteractionMode_InteractionMode_ARRAYSIZE = Body_InteractionMode_InteractionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Body_InteractionMode_descriptor();
inline const ::std::string& Body_InteractionMode_Name(Body_InteractionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Body_InteractionMode_descriptor(), value);
}
inline bool Body_InteractionMode_Parse(
    const ::std::string& name, Body_InteractionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Body_InteractionMode>(
    Body_InteractionMode_descriptor(), name, value);
}
enum Body_State {
  Body_State_DEFAULT = 0,
  Body_State_ACTIVE = 1,
  Body_State_DEAD = 2,
  Body_State_Body_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Body_State_Body_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Body_State_IsValid(int value);
const Body_State Body_State_State_MIN = Body_State_DEFAULT;
const Body_State Body_State_State_MAX = Body_State_DEAD;
const int Body_State_State_ARRAYSIZE = Body_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Body_State_descriptor();
inline const ::std::string& Body_State_Name(Body_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Body_State_descriptor(), value);
}
inline bool Body_State_Parse(
    const ::std::string& name, Body_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Body_State>(
    Body_State_descriptor(), name, value);
}
// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srl.body.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:srl.body.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_body_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Quaternion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srl.body.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Quaternion* other);
  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(NULL);
  }

  Quaternion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  double w() const;
  void set_w(double value);

  // @@protoc_insertion_point(class_scope:srl.body.Quaternion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_body_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srl.body.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(NULL);
  }

  Pose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .srl.body.Position pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::srl::body::Position& _internal_pos() const;
  public:
  const ::srl::body::Position& pos() const;
  ::srl::body::Position* release_pos();
  ::srl::body::Position* mutable_pos();
  void set_allocated_pos(::srl::body::Position* pos);

  // .srl.body.Quaternion orient = 2;
  bool has_orient() const;
  void clear_orient();
  static const int kOrientFieldNumber = 2;
  private:
  const ::srl::body::Quaternion& _internal_orient() const;
  public:
  const ::srl::body::Quaternion& orient() const;
  ::srl::body::Quaternion* release_orient();
  ::srl::body::Quaternion* mutable_orient();
  void set_allocated_orient(::srl::body::Quaternion* orient);

  // @@protoc_insertion_point(class_scope:srl.body.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::srl::body::Position* pos_;
  ::srl::body::Quaternion* orient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_body_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Joint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srl.body.Joint) */ {
 public:
  Joint();
  virtual ~Joint();

  Joint(const Joint& from);

  inline Joint& operator=(const Joint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Joint(Joint&& from) noexcept
    : Joint() {
    *this = ::std::move(from);
  }

  inline Joint& operator=(Joint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Joint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint* internal_default_instance() {
    return reinterpret_cast<const Joint*>(
               &_Joint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Joint* other);
  friend void swap(Joint& a, Joint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Joint* New() const final {
    return CreateMaybeMessage<Joint>(NULL);
  }

  Joint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Joint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Joint& from);
  void MergeFrom(const Joint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .srl.body.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::srl::body::Pose& _internal_pose() const;
  public:
  const ::srl::body::Pose& pose() const;
  ::srl::body::Pose* release_pose();
  ::srl::body::Pose* mutable_pose();
  void set_allocated_pose(::srl::body::Pose* pose);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:srl.body.Joint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::srl::body::Pose* pose_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_body_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srl.body.Hand) */ {
 public:
  Hand();
  virtual ~Hand();

  Hand(const Hand& from);

  inline Hand& operator=(const Hand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hand(Hand&& from) noexcept
    : Hand() {
    *this = ::std::move(from);
  }

  inline Hand& operator=(Hand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hand* internal_default_instance() {
    return reinterpret_cast<const Hand*>(
               &_Hand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Hand* other);
  friend void swap(Hand& a, Hand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hand* New() const final {
    return CreateMaybeMessage<Hand>(NULL);
  }

  Hand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hand& from);
  void MergeFrom(const Hand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Hand_HandState HandState;
  static const HandState UNKNOWN =
    Hand_HandState_UNKNOWN;
  static const HandState NOT_TRACKED =
    Hand_HandState_NOT_TRACKED;
  static const HandState OPEN =
    Hand_HandState_OPEN;
  static const HandState CLOSED =
    Hand_HandState_CLOSED;
  static inline bool HandState_IsValid(int value) {
    return Hand_HandState_IsValid(value);
  }
  static const HandState HandState_MIN =
    Hand_HandState_HandState_MIN;
  static const HandState HandState_MAX =
    Hand_HandState_HandState_MAX;
  static const int HandState_ARRAYSIZE =
    Hand_HandState_HandState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HandState_descriptor() {
    return Hand_HandState_descriptor();
  }
  static inline const ::std::string& HandState_Name(HandState value) {
    return Hand_HandState_Name(value);
  }
  static inline bool HandState_Parse(const ::std::string& name,
      HandState* value) {
    return Hand_HandState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .srl.body.Joint joints = 4;
  int joints_size() const;
  void clear_joints();
  static const int kJointsFieldNumber = 4;
  ::srl::body::Joint* mutable_joints(int index);
  ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >*
      mutable_joints();
  const ::srl::body::Joint& joints(int index) const;
  ::srl::body::Joint* add_joints();
  const ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >&
      joints() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .srl.body.Hand.HandState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::srl::body::Hand_HandState state() const;
  void set_state(::srl::body::Hand_HandState value);

  // @@protoc_insertion_point(class_scope:srl.body.Hand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::srl::body::Joint > joints_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_body_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Targets : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srl.body.Targets) */ {
 public:
  Targets();
  virtual ~Targets();

  Targets(const Targets& from);

  inline Targets& operator=(const Targets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Targets(Targets&& from) noexcept
    : Targets() {
    *this = ::std::move(from);
  }

  inline Targets& operator=(Targets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Targets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Targets* internal_default_instance() {
    return reinterpret_cast<const Targets*>(
               &_Targets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Targets* other);
  friend void swap(Targets& a, Targets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Targets* New() const final {
    return CreateMaybeMessage<Targets>(NULL);
  }

  Targets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Targets>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Targets& from);
  void MergeFrom(const Targets& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Targets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .srl.body.Pose left = 1;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  private:
  const ::srl::body::Pose& _internal_left() const;
  public:
  const ::srl::body::Pose& left() const;
  ::srl::body::Pose* release_left();
  ::srl::body::Pose* mutable_left();
  void set_allocated_left(::srl::body::Pose* left);

  // .srl.body.Pose right = 2;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 2;
  private:
  const ::srl::body::Pose& _internal_right() const;
  public:
  const ::srl::body::Pose& right() const;
  ::srl::body::Pose* release_right();
  ::srl::body::Pose* mutable_right();
  void set_allocated_right(::srl::body::Pose* right);

  // @@protoc_insertion_point(class_scope:srl.body.Targets)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::srl::body::Pose* left_;
  ::srl::body::Pose* right_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_body_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:srl.body.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Body* other);
  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return CreateMaybeMessage<Body>(NULL);
  }

  Body* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Body_InteractionMode InteractionMode;
  static const InteractionMode NONE =
    Body_InteractionMode_NONE;
  static const InteractionMode FOLLOW =
    Body_InteractionMode_FOLLOW;
  static const InteractionMode MIRROR =
    Body_InteractionMode_MIRROR;
  static const InteractionMode AVOID =
    Body_InteractionMode_AVOID;
  static inline bool InteractionMode_IsValid(int value) {
    return Body_InteractionMode_IsValid(value);
  }
  static const InteractionMode InteractionMode_MIN =
    Body_InteractionMode_InteractionMode_MIN;
  static const InteractionMode InteractionMode_MAX =
    Body_InteractionMode_InteractionMode_MAX;
  static const int InteractionMode_ARRAYSIZE =
    Body_InteractionMode_InteractionMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InteractionMode_descriptor() {
    return Body_InteractionMode_descriptor();
  }
  static inline const ::std::string& InteractionMode_Name(InteractionMode value) {
    return Body_InteractionMode_Name(value);
  }
  static inline bool InteractionMode_Parse(const ::std::string& name,
      InteractionMode* value) {
    return Body_InteractionMode_Parse(name, value);
  }

  typedef Body_State State;
  static const State DEFAULT =
    Body_State_DEFAULT;
  static const State ACTIVE =
    Body_State_ACTIVE;
  static const State DEAD =
    Body_State_DEAD;
  static inline bool State_IsValid(int value) {
    return Body_State_IsValid(value);
  }
  static const State State_MIN =
    Body_State_State_MIN;
  static const State State_MAX =
    Body_State_State_MAX;
  static const int State_ARRAYSIZE =
    Body_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Body_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Body_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Body_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .srl.body.Joint joints = 6;
  int joints_size() const;
  void clear_joints();
  static const int kJointsFieldNumber = 6;
  ::srl::body::Joint* mutable_joints(int index);
  ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >*
      mutable_joints();
  const ::srl::body::Joint& joints(int index) const;
  ::srl::body::Joint* add_joints();
  const ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >&
      joints() const;

  // repeated .srl.body.Hand hands = 7;
  int hands_size() const;
  void clear_hands();
  static const int kHandsFieldNumber = 7;
  ::srl::body::Hand* mutable_hands(int index);
  ::google::protobuf::RepeatedPtrField< ::srl::body::Hand >*
      mutable_hands();
  const ::srl::body::Hand& hands(int index) const;
  ::srl::body::Hand* add_hands();
  const ::google::protobuf::RepeatedPtrField< ::srl::body::Hand >&
      hands() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .srl.body.Targets targets = 8;
  bool has_targets() const;
  void clear_targets();
  static const int kTargetsFieldNumber = 8;
  private:
  const ::srl::body::Targets& _internal_targets() const;
  public:
  const ::srl::body::Targets& targets() const;
  ::srl::body::Targets* release_targets();
  ::srl::body::Targets* mutable_targets();
  void set_allocated_targets(::srl::body::Targets* targets);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // uint32 time_stamp = 3;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  ::google::protobuf::uint32 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint32 value);

  // .srl.body.Body.InteractionMode interaction_mode = 4;
  void clear_interaction_mode();
  static const int kInteractionModeFieldNumber = 4;
  ::srl::body::Body_InteractionMode interaction_mode() const;
  void set_interaction_mode(::srl::body::Body_InteractionMode value);

  // .srl.body.Body.State state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::srl::body::Body_State state() const;
  void set_state(::srl::body::Body_State value);

  // @@protoc_insertion_point(class_scope:srl.body.Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::srl::body::Joint > joints_;
  ::google::protobuf::RepeatedPtrField< ::srl::body::Hand > hands_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::srl::body::Targets* targets_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 time_stamp_;
  int interaction_mode_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_body_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// double x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:srl.body.Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Position.x)
}

// double y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:srl.body.Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Position.y)
}

// double z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:srl.body.Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Position.z)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:srl.body.Quaternion.x)
  return x_;
}
inline void Quaternion::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Quaternion.x)
}

// double y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:srl.body.Quaternion.y)
  return y_;
}
inline void Quaternion::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Quaternion.y)
}

// double z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:srl.body.Quaternion.z)
  return z_;
}
inline void Quaternion::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Quaternion.z)
}

// double w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:srl.body.Quaternion.w)
  return w_;
}
inline void Quaternion::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Quaternion.w)
}

// -------------------------------------------------------------------

// Pose

// .srl.body.Position pos = 1;
inline bool Pose::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void Pose::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::srl::body::Position& Pose::_internal_pos() const {
  return *pos_;
}
inline const ::srl::body::Position& Pose::pos() const {
  const ::srl::body::Position* p = pos_;
  // @@protoc_insertion_point(field_get:srl.body.Pose.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::srl::body::Position*>(
      &::srl::body::_Position_default_instance_);
}
inline ::srl::body::Position* Pose::release_pos() {
  // @@protoc_insertion_point(field_release:srl.body.Pose.pos)
  
  ::srl::body::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::srl::body::Position* Pose::mutable_pos() {
  
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::srl::body::Position>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:srl.body.Pose.pos)
  return pos_;
}
inline void Pose::set_allocated_pos(::srl::body::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:srl.body.Pose.pos)
}

// .srl.body.Quaternion orient = 2;
inline bool Pose::has_orient() const {
  return this != internal_default_instance() && orient_ != NULL;
}
inline void Pose::clear_orient() {
  if (GetArenaNoVirtual() == NULL && orient_ != NULL) {
    delete orient_;
  }
  orient_ = NULL;
}
inline const ::srl::body::Quaternion& Pose::_internal_orient() const {
  return *orient_;
}
inline const ::srl::body::Quaternion& Pose::orient() const {
  const ::srl::body::Quaternion* p = orient_;
  // @@protoc_insertion_point(field_get:srl.body.Pose.orient)
  return p != NULL ? *p : *reinterpret_cast<const ::srl::body::Quaternion*>(
      &::srl::body::_Quaternion_default_instance_);
}
inline ::srl::body::Quaternion* Pose::release_orient() {
  // @@protoc_insertion_point(field_release:srl.body.Pose.orient)
  
  ::srl::body::Quaternion* temp = orient_;
  orient_ = NULL;
  return temp;
}
inline ::srl::body::Quaternion* Pose::mutable_orient() {
  
  if (orient_ == NULL) {
    auto* p = CreateMaybeMessage<::srl::body::Quaternion>(GetArenaNoVirtual());
    orient_ = p;
  }
  // @@protoc_insertion_point(field_mutable:srl.body.Pose.orient)
  return orient_;
}
inline void Pose::set_allocated_orient(::srl::body::Quaternion* orient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orient_;
  }
  if (orient) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orient, submessage_arena);
    }
    
  } else {
    
  }
  orient_ = orient;
  // @@protoc_insertion_point(field_set_allocated:srl.body.Pose.orient)
}

// -------------------------------------------------------------------

// Joint

// int32 id = 1;
inline void Joint::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Joint::id() const {
  // @@protoc_insertion_point(field_get:srl.body.Joint.id)
  return id_;
}
inline void Joint::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Joint.id)
}

// string name = 2;
inline void Joint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Joint::name() const {
  // @@protoc_insertion_point(field_get:srl.body.Joint.name)
  return name_.GetNoArena();
}
inline void Joint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srl.body.Joint.name)
}
#if LANG_CXX11
inline void Joint::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srl.body.Joint.name)
}
#endif
inline void Joint::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srl.body.Joint.name)
}
inline void Joint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srl.body.Joint.name)
}
inline ::std::string* Joint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:srl.body.Joint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Joint::release_name() {
  // @@protoc_insertion_point(field_release:srl.body.Joint.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Joint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:srl.body.Joint.name)
}

// .srl.body.Pose pose = 3;
inline bool Joint::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void Joint::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
inline const ::srl::body::Pose& Joint::_internal_pose() const {
  return *pose_;
}
inline const ::srl::body::Pose& Joint::pose() const {
  const ::srl::body::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:srl.body.Joint.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::srl::body::Pose*>(
      &::srl::body::_Pose_default_instance_);
}
inline ::srl::body::Pose* Joint::release_pose() {
  // @@protoc_insertion_point(field_release:srl.body.Joint.pose)
  
  ::srl::body::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::srl::body::Pose* Joint::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::srl::body::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:srl.body.Joint.pose)
  return pose_;
}
inline void Joint::set_allocated_pose(::srl::body::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:srl.body.Joint.pose)
}

// -------------------------------------------------------------------

// Hand

// int32 id = 1;
inline void Hand::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Hand::id() const {
  // @@protoc_insertion_point(field_get:srl.body.Hand.id)
  return id_;
}
inline void Hand::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Hand.id)
}

// string name = 2;
inline void Hand::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hand::name() const {
  // @@protoc_insertion_point(field_get:srl.body.Hand.name)
  return name_.GetNoArena();
}
inline void Hand::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srl.body.Hand.name)
}
#if LANG_CXX11
inline void Hand::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srl.body.Hand.name)
}
#endif
inline void Hand::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srl.body.Hand.name)
}
inline void Hand::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srl.body.Hand.name)
}
inline ::std::string* Hand::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:srl.body.Hand.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hand::release_name() {
  // @@protoc_insertion_point(field_release:srl.body.Hand.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hand::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:srl.body.Hand.name)
}

// .srl.body.Hand.HandState state = 3;
inline void Hand::clear_state() {
  state_ = 0;
}
inline ::srl::body::Hand_HandState Hand::state() const {
  // @@protoc_insertion_point(field_get:srl.body.Hand.state)
  return static_cast< ::srl::body::Hand_HandState >(state_);
}
inline void Hand::set_state(::srl::body::Hand_HandState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Hand.state)
}

// repeated .srl.body.Joint joints = 4;
inline int Hand::joints_size() const {
  return joints_.size();
}
inline void Hand::clear_joints() {
  joints_.Clear();
}
inline ::srl::body::Joint* Hand::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:srl.body.Hand.joints)
  return joints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >*
Hand::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:srl.body.Hand.joints)
  return &joints_;
}
inline const ::srl::body::Joint& Hand::joints(int index) const {
  // @@protoc_insertion_point(field_get:srl.body.Hand.joints)
  return joints_.Get(index);
}
inline ::srl::body::Joint* Hand::add_joints() {
  // @@protoc_insertion_point(field_add:srl.body.Hand.joints)
  return joints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >&
Hand::joints() const {
  // @@protoc_insertion_point(field_list:srl.body.Hand.joints)
  return joints_;
}

// -------------------------------------------------------------------

// Targets

// .srl.body.Pose left = 1;
inline bool Targets::has_left() const {
  return this != internal_default_instance() && left_ != NULL;
}
inline void Targets::clear_left() {
  if (GetArenaNoVirtual() == NULL && left_ != NULL) {
    delete left_;
  }
  left_ = NULL;
}
inline const ::srl::body::Pose& Targets::_internal_left() const {
  return *left_;
}
inline const ::srl::body::Pose& Targets::left() const {
  const ::srl::body::Pose* p = left_;
  // @@protoc_insertion_point(field_get:srl.body.Targets.left)
  return p != NULL ? *p : *reinterpret_cast<const ::srl::body::Pose*>(
      &::srl::body::_Pose_default_instance_);
}
inline ::srl::body::Pose* Targets::release_left() {
  // @@protoc_insertion_point(field_release:srl.body.Targets.left)
  
  ::srl::body::Pose* temp = left_;
  left_ = NULL;
  return temp;
}
inline ::srl::body::Pose* Targets::mutable_left() {
  
  if (left_ == NULL) {
    auto* p = CreateMaybeMessage<::srl::body::Pose>(GetArenaNoVirtual());
    left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:srl.body.Targets.left)
  return left_;
}
inline void Targets::set_allocated_left(::srl::body::Pose* left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_;
  }
  if (left) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:srl.body.Targets.left)
}

// .srl.body.Pose right = 2;
inline bool Targets::has_right() const {
  return this != internal_default_instance() && right_ != NULL;
}
inline void Targets::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
}
inline const ::srl::body::Pose& Targets::_internal_right() const {
  return *right_;
}
inline const ::srl::body::Pose& Targets::right() const {
  const ::srl::body::Pose* p = right_;
  // @@protoc_insertion_point(field_get:srl.body.Targets.right)
  return p != NULL ? *p : *reinterpret_cast<const ::srl::body::Pose*>(
      &::srl::body::_Pose_default_instance_);
}
inline ::srl::body::Pose* Targets::release_right() {
  // @@protoc_insertion_point(field_release:srl.body.Targets.right)
  
  ::srl::body::Pose* temp = right_;
  right_ = NULL;
  return temp;
}
inline ::srl::body::Pose* Targets::mutable_right() {
  
  if (right_ == NULL) {
    auto* p = CreateMaybeMessage<::srl::body::Pose>(GetArenaNoVirtual());
    right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:srl.body.Targets.right)
  return right_;
}
inline void Targets::set_allocated_right(::srl::body::Pose* right) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_;
  }
  if (right) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:srl.body.Targets.right)
}

// -------------------------------------------------------------------

// Body

// int32 id = 1;
inline void Body::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Body::id() const {
  // @@protoc_insertion_point(field_get:srl.body.Body.id)
  return id_;
}
inline void Body::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Body.id)
}

// string name = 2;
inline void Body::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Body::name() const {
  // @@protoc_insertion_point(field_get:srl.body.Body.name)
  return name_.GetNoArena();
}
inline void Body::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:srl.body.Body.name)
}
#if LANG_CXX11
inline void Body::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:srl.body.Body.name)
}
#endif
inline void Body::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:srl.body.Body.name)
}
inline void Body::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:srl.body.Body.name)
}
inline ::std::string* Body::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:srl.body.Body.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Body::release_name() {
  // @@protoc_insertion_point(field_release:srl.body.Body.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Body::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:srl.body.Body.name)
}

// uint32 time_stamp = 3;
inline void Body::clear_time_stamp() {
  time_stamp_ = 0u;
}
inline ::google::protobuf::uint32 Body::time_stamp() const {
  // @@protoc_insertion_point(field_get:srl.body.Body.time_stamp)
  return time_stamp_;
}
inline void Body::set_time_stamp(::google::protobuf::uint32 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Body.time_stamp)
}

// .srl.body.Body.InteractionMode interaction_mode = 4;
inline void Body::clear_interaction_mode() {
  interaction_mode_ = 0;
}
inline ::srl::body::Body_InteractionMode Body::interaction_mode() const {
  // @@protoc_insertion_point(field_get:srl.body.Body.interaction_mode)
  return static_cast< ::srl::body::Body_InteractionMode >(interaction_mode_);
}
inline void Body::set_interaction_mode(::srl::body::Body_InteractionMode value) {
  
  interaction_mode_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Body.interaction_mode)
}

// .srl.body.Body.State state = 5;
inline void Body::clear_state() {
  state_ = 0;
}
inline ::srl::body::Body_State Body::state() const {
  // @@protoc_insertion_point(field_get:srl.body.Body.state)
  return static_cast< ::srl::body::Body_State >(state_);
}
inline void Body::set_state(::srl::body::Body_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:srl.body.Body.state)
}

// repeated .srl.body.Joint joints = 6;
inline int Body::joints_size() const {
  return joints_.size();
}
inline void Body::clear_joints() {
  joints_.Clear();
}
inline ::srl::body::Joint* Body::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:srl.body.Body.joints)
  return joints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >*
Body::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:srl.body.Body.joints)
  return &joints_;
}
inline const ::srl::body::Joint& Body::joints(int index) const {
  // @@protoc_insertion_point(field_get:srl.body.Body.joints)
  return joints_.Get(index);
}
inline ::srl::body::Joint* Body::add_joints() {
  // @@protoc_insertion_point(field_add:srl.body.Body.joints)
  return joints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::srl::body::Joint >&
Body::joints() const {
  // @@protoc_insertion_point(field_list:srl.body.Body.joints)
  return joints_;
}

// repeated .srl.body.Hand hands = 7;
inline int Body::hands_size() const {
  return hands_.size();
}
inline void Body::clear_hands() {
  hands_.Clear();
}
inline ::srl::body::Hand* Body::mutable_hands(int index) {
  // @@protoc_insertion_point(field_mutable:srl.body.Body.hands)
  return hands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::srl::body::Hand >*
Body::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:srl.body.Body.hands)
  return &hands_;
}
inline const ::srl::body::Hand& Body::hands(int index) const {
  // @@protoc_insertion_point(field_get:srl.body.Body.hands)
  return hands_.Get(index);
}
inline ::srl::body::Hand* Body::add_hands() {
  // @@protoc_insertion_point(field_add:srl.body.Body.hands)
  return hands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::srl::body::Hand >&
Body::hands() const {
  // @@protoc_insertion_point(field_list:srl.body.Body.hands)
  return hands_;
}

// .srl.body.Targets targets = 8;
inline bool Body::has_targets() const {
  return this != internal_default_instance() && targets_ != NULL;
}
inline void Body::clear_targets() {
  if (GetArenaNoVirtual() == NULL && targets_ != NULL) {
    delete targets_;
  }
  targets_ = NULL;
}
inline const ::srl::body::Targets& Body::_internal_targets() const {
  return *targets_;
}
inline const ::srl::body::Targets& Body::targets() const {
  const ::srl::body::Targets* p = targets_;
  // @@protoc_insertion_point(field_get:srl.body.Body.targets)
  return p != NULL ? *p : *reinterpret_cast<const ::srl::body::Targets*>(
      &::srl::body::_Targets_default_instance_);
}
inline ::srl::body::Targets* Body::release_targets() {
  // @@protoc_insertion_point(field_release:srl.body.Body.targets)
  
  ::srl::body::Targets* temp = targets_;
  targets_ = NULL;
  return temp;
}
inline ::srl::body::Targets* Body::mutable_targets() {
  
  if (targets_ == NULL) {
    auto* p = CreateMaybeMessage<::srl::body::Targets>(GetArenaNoVirtual());
    targets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:srl.body.Body.targets)
  return targets_;
}
inline void Body::set_allocated_targets(::srl::body::Targets* targets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete targets_;
  }
  if (targets) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targets, submessage_arena);
    }
    
  } else {
    
  }
  targets_ = targets;
  // @@protoc_insertion_point(field_set_allocated:srl.body.Body.targets)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace body
}  // namespace srl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::srl::body::Hand_HandState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srl::body::Hand_HandState>() {
  return ::srl::body::Hand_HandState_descriptor();
}
template <> struct is_proto_enum< ::srl::body::Body_InteractionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srl::body::Body_InteractionMode>() {
  return ::srl::body::Body_InteractionMode_descriptor();
}
template <> struct is_proto_enum< ::srl::body::Body_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srl::body::Body_State>() {
  return ::srl::body::Body_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_body_2eproto
